{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","data","setData","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAEMA,EACE,mCADFA,EAEG,2CAuEMC,MApEf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAENC,EAFM,KAEAC,EAFA,OAGiBF,mBAAS,IAH1B,mBAGNG,EAHM,KAGGC,EAHH,KA+Bb,OACE,qBAAKC,UACqB,oBAAhBF,EAAQG,MAAyBH,EAAQG,KAAKC,KAAO,GAAM,WAAsB,MAD3F,SAEA,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,WACZC,SAAU,SAAAC,GAAC,OAAIT,EAAQS,EAAEC,OAAOC,QAChCA,MAAOZ,EACPa,WArCO,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAoDH,IACxDoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAQ,IACRoB,QAAQC,IAAIF,WAiCW,oBAAhBlB,EAAQG,KACjB,gCACA,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGF,EAAQqB,KADX,KACmBrB,EAAQsB,IAAIC,WAE/B,qBAAKrB,UAAU,OAAf,SAlCc,SAACsB,GACnB,IAKIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAPS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OACtE,SAAU,YAAa,UAAW,WAAY,YAM3BL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAuBPE,CAAY,IAAIC,WAEzC,sBAAKhC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACCiC,KAAKC,MAAMpC,EAAQG,KAAKC,MADzB,WAGA,qBAAKF,UAAU,UAAf,SACCF,EAAQA,QAAQ,GAAGG,aAIjB,SCzDIkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bce2d8be.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst api = {\n  key : \"08887969dee463c04e474911212a01ab\",\n  base : \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n\n  const [data, setData] = useState('');\n  const [weather, setWeather] = useState({});\n  \n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${data}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        setWeather(result);\n        setData('');\n        console.log(result);\n      });\n    }\n  };\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\n    \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    \n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className={\n      (typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app'}>\n    <main>\n      <div className=\"search-box\">\n        <input \n          type=\"text\"\n          className=\"search-bar\"\n          placeholder=\"Search..\"\n          onChange={e => setData(e.target.value)}\n          value={data}\n          onKeyPress={search}\n        />\n      </div>\n      {(typeof weather.main != \"undefined\") ? (\n      <div>\n      <div className=\"location-box\">\n        <div className=\"location\">\n          {weather.name}, {weather.sys.country}\n        </div>\n        <div className=\"date\">{dateBuilder(new Date())}</div>\n      </div>\n      <div className=\"weather-box\">\n        <div className=\"temp\">\n        {Math.round(weather.main.temp)}Â°C\n        </div>\n        <div className=\"weather\">\n        {weather.weather[0].main}\n        </div>\n      </div>\n      </div>\n      ) : ('')}\n    </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}